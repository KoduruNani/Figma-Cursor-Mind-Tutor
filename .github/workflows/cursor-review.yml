name: Cursor AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  cursor-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      run: |
        cd client
        npm ci

    - name: Run Cursor AI Analysis
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          
          try {
            // Check if Cursor AI is available
            console.log('🔍 Running Cursor AI code analysis...');
            
            // Analyze backend (C#)
            console.log('📝 Analyzing C# backend code...');
            execSync('dotnet build server/server.csproj --verbosity quiet', { stdio: 'inherit' });
            
            // Analyze frontend (TypeScript)
            console.log('📝 Analyzing TypeScript frontend code...');
            execSync('cd client && npm run build', { stdio: 'inherit' });
            
            // Run linting
            console.log('🔍 Running linting checks...');
            execSync('cd client && npm run lint', { stdio: 'inherit' });
            
            console.log('✅ Cursor AI analysis completed successfully');
            
          } catch (error) {
            console.error('❌ Cursor AI analysis failed:', error.message);
            core.setFailed('Cursor AI analysis failed');
          }

    - name: Generate PR Summary
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          // Analyze changes
          const backendChanges = files.filter(f => f.filename.startsWith('server/'));
          const frontendChanges = files.filter(f => f.filename.startsWith('client/'));
          const configChanges = files.filter(f => f.filename.includes('.yaml') || f.filename.includes('.yml') || f.filename.includes('.json'));
          
          // Determine impact level
          let impactLevel = 'LOW';
          if (files.length > 10 || backendChanges.length > 5 || frontendChanges.length > 5) {
            impactLevel = 'MEDIUM';
          }
          if (files.some(f => f.filename.includes('Program.cs') || f.filename.includes('Startup.cs') || f.filename.includes('package.json'))) {
            impactLevel = 'HIGH';
          }
          
          // Generate summary
          const summary = `## 🤖 Cursor AI Review Summary
          
          **PR Title**: ${pr.title}
          **Impact Level**: ${impactLevel}
          
          ### 📊 Changes Overview
          - **Total files changed**: ${files.length}
          - **Backend changes**: ${backendChanges.length} files
          - **Frontend changes**: ${frontendChanges.length} files
          - **Configuration changes**: ${configChanges.length} files
          
          ### 🔍 Key Areas
          ${backendChanges.length > 0 ? '- Backend API and services' : ''}
          ${frontendChanges.length > 0 ? '- Frontend components and UI' : ''}
          ${configChanges.length > 0 ? '- Configuration and setup' : ''}
          
          ### 📋 Review Checklist
          - [ ] Code follows established patterns
          - [ ] Proper error handling implemented
          - [ ] Security best practices followed
          - [ ] Performance considerations addressed
          - [ ] Tests are comprehensive
          - [ ] Documentation updated
          
          ### 👥 Suggested Reviewers
          ${backendChanges.length > 0 ? '- @backend-lead (Backend changes)' : ''}
          ${frontendChanges.length > 0 ? '- @frontend-lead (Frontend changes)' : ''}
          ${configChanges.length > 0 ? '- @devops-lead (Configuration changes)' : ''}
          
          ---
          *This review was generated by Cursor AI automation*`;
          
          // Post comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: summary
          });

    - name: Run Security Scan
      uses: actions/github-script@v7
      with:
        script: |
          console.log('🔒 Running security analysis...');
          
          // Check for common security issues
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const securityIssues = [];
          
          for (const file of files) {
            if (file.filename.includes('password') || file.filename.includes('secret') || file.filename.includes('key')) {
              securityIssues.push(`⚠️ Potential security concern: ${file.filename}`);
            }
          }
          
          if (securityIssues.length > 0) {
            const securityComment = `## 🔒 Security Review Required
            
            The following potential security concerns were detected:
            ${securityIssues.join('\n')}
            
            Please ensure no sensitive information is being committed.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: securityComment
            });
          }

    - name: Check Code Quality
      uses: actions/github-script@v7
      with:
        script: |
          console.log('📊 Running code quality checks...');
          
          // Check for common code quality issues
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const qualityIssues = [];
          
          for (const file of files) {
            if (file.filename.endsWith('.cs') && file.changes > 200) {
              qualityIssues.push(`📝 Large C# file: ${file.filename} (${file.changes} lines)`);
            }
            if (file.filename.endsWith('.tsx') && file.changes > 150) {
              qualityIssues.push(`📝 Large React component: ${file.filename} (${file.changes} lines)`);
            }
          }
          
          if (qualityIssues.length > 0) {
            const qualityComment = `## 📊 Code Quality Analysis
            
            Consider the following for code quality:
            ${qualityIssues.join('\n')}
            
            **Recommendations:**
            - Break large files into smaller, focused modules
            - Follow single responsibility principle
            - Consider component composition for large React components`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: qualityComment
            });
          } 